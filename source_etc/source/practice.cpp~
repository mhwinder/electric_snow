/*---------------------------------------------------------------------------------

	by GugloPWN based on NeHe 4 by Dovoto

---------------------------------------------------------------------------------*/

// include your ndslib
#include <nds.h>
#include <stdio.h>
#include <fat.h>
#include <filesystem.h>
#include "particle.h"
#include "MD2.h"

//3d crap
#include "Gtex_pal_bin.h"
#include "Gtex_bin.h"
#include "email_tex_bin.h"
#include "email_pal_bin.h"
#include "deco_tex_bin.h"
#include "deco_pal_bin.h"

//2d crap
#include "dot.h"

void seedrandom();
void DrawGLScene();
void input();
void loadtex();
void subload();
void subrun();

int xc = 16686;
int yc = 9400;
int animation = 0;
touchPosition touch;
u16* gfxSub;

//texture variables
int notex;
int G;
int G_pal;
int email_tex;
int email_pal;
int deco_tex;
int deco_pal;

//MD2 variables
MD2Entity Deco;
bool DecoEnable;

int main() {	

	// Setup the Main screen for 3D 
	videoSetMode(MODE_0_3D);

	//Set Video RAM
	vramSetBankA(VRAM_A_TEXTURE);
	vramSetBankB(VRAM_B_TEXTURE);

	// initialize the geometry engine
	glInit();
	
	// enable antialiasing
	//glEnable(GL_ANTIALIAS);
	glEnable(GL_TEXTURE_2D);

	//initialize the console on the subscreen
	consoleDemoInit();
	printf("\n console init");
	lcdSwap();
	
	// setup the rear plane
	glClearColor(0,0,0,31); // BG must be opaque for AA to work
	glClearPolyID(63); // BG must have a unique polygon ID for AA to work
	glClearDepth(0x7FFF);

	// Set our viewport to be the same size as the screen
	glViewport(0,0,255,191);
	
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluPerspective(70, 256.0 / 192.0, 0.1, 100);


	//ds specific, several attributes can be set here	
	glPolyFmt(POLY_ALPHA(31) | POLY_CULL_NONE);
	
	// Set the current matrix to be the model matrix
	glMatrixMode(GL_MODELVIEW);

	//Init Filesystem
	printf("\nInitialize nitroFS... ");
	if (nitroFSInit()) {printf(" success!");};


	int i;
	particle *psys[100];
	for(i=0;i<100;i++){psys[i]= new particle();}

	LoadMD2Model("nitrofiles:/deco02.md2",512,256,1,Deco,DecoEnable);

	loadtex();
	subload();

//Delete this shit GEOMETRY TEST
	int maxvert = 0;
	for (i = 0; i < Deco.header.num_tris; ++i){
					if(Deco.tris[i].vertex[0] > maxvert) maxvert = Deco.tris[i].vertex[0];    
			}
	printf("\nMaxvert = %d ", maxvert); 
//End delete shit

	//while(1);

	while (1) 
	{
		//Clean up the Console
		consoleClear();
		input();

		printf("xc: %d\nyc: %d\n anim: %d\n", xc,yc,animation);

		for(i=0;i<100;i++){psys[i]->moveparticle(0,0,50,50,xc,yc);}

		// draw the scene
		DrawGLScene();

		// The many cases cause color changes and nothing more
		glBindTexture(0,notex); //Make sure it has no texture
		if (animation < 90) {for(i=0;i<100;i++){psys[i]->drawparticle(255,animation*2,0,animation);}}
		else if (animation < 180) {for(i=0;i<100;i++){psys[i]->drawparticle(255,(180-animation)*2,0,animation);}}
		else if (animation < 270) {for(i=0;i<100;i++){psys[i]->drawparticle(255,0,(-180+animation)*2,animation);}}
		else {for(i=0;i<100;i++){psys[i]->drawparticle(255,0,(360-animation)*2,animation);}}

		
		// flush to screen	
		glFlush(0);
		
		subrun();
		
		// wait for the screen to refresh
		swiWaitForVBlank();

		animation++;
		if (animation > 360) animation = 1;
	}
	
	return 0;
}

void DrawGLScene()											// Here's Where We Do All The Drawing
{	
	//Spinning G
	glBindTexture(0,G);
	glColorTable(GL_RGB256, G_pal);

	glLoadIdentity();
	glTranslate3f32(0,0,-22576);
	glRotatef32i((animation*DEGREES_IN_CIRCLE / 360),0,0,4096);
	glColor3b(255,255,255);
	glBegin(GL_QUAD);
		glTexCoord2f32(0,4096);
		glVertex3v16(-5096, -5096, 0);
		glTexCoord2f32(0,0);
		glVertex3v16(-5096, 5096, 0);
		glTexCoord2f32(4096,0);
		glVertex3v16(5096, 5096, 0);
		glTexCoord2f32(4096,4096);
		glVertex3v16(5096, -5096, 0);
	glEnd();

	//Scrolling email
	glBindTexture(0,email_tex);
	glColorTable(GL_RGB256, email_pal);

	glLoadIdentity();
	glTranslate3f32(0,0,-24575);
	glColor3b(0,255,0);

	if (animation < 90) {glColor3b(0,255,animation*2);}
	else if (animation < 180) {glColor3b(0,255,(180-animation)*2);}
	else if (animation < 270) {glColor3b((animation-180)*2,255,0);}
	else {glColor3b((360-animation)*2,255,0);}

	glBegin(GL_QUAD); //glTexCoord2f32(0+4096*animation/360,0);
		glTexCoord2f32(4096*animation/360,0);
		glVertex3v16(-23000, -12000, 0);
		glTexCoord2f32(4096*animation/360,4096);
		glVertex3v16(-23000, -17000, 0);
		glTexCoord2f32(4096+4096*animation/360,4096);
		glVertex3v16(23000, -17000, 0);
		glTexCoord2f32(4096+4096*animation/360,0);
		glVertex3v16(23000, -12000, 0);
	glEnd();

	//Textured Cube
	glBindTexture(0,deco_tex);
	glColorTable(GL_RGB256, deco_pal);
	glColor3b(255,255,255);

	glLoadIdentity();
	//glRotatef32i((animation*DEGREES_IN_CIRCLE / 360),0,0,4096);
	glTranslate3f32(0,0,-1000);

	
	RenderMD2Model(0, Deco, DecoEnable);
	printf("\n Cube Drawn");

	return;
}

void input()
{
	scanKeys();
	if ((keysHeld() & KEY_LEFT)) xc-=300;
	if ((keysHeld() & KEY_RIGHT)) xc+=300;
	if ((keysHeld() & KEY_DOWN)) yc-=300;
	if ((keysHeld() & KEY_UP)) yc+=300;

	touchRead(&touch);
	if ((keysHeld() & KEY_TOUCH))
	{
		xc = (int)(touch.px*180.3921-23000);
		yc = (int)(-touch.py*180.208+17300);
	}
}

void loadtex()
{
	glGenTextures(1,&G);

	glBindTexture(0,G);
	glTexImage2D(0,0,GL_RGB256,TEXTURE_SIZE_64,TEXTURE_SIZE_64,0,TEXGEN_TEXCOORD|(1<<29),(u8*)Gtex_bin);
	G_pal = gluTexLoadPal((u16*)Gtex_pal_bin,256,GL_RGB256);
	
	glGenTextures(1,&email_tex);

	glBindTexture(0,email_tex);
	glTexImage2D(0,0,GL_RGB256,TEXTURE_SIZE_256,TEXTURE_SIZE_32,0,TEXGEN_TEXCOORD|(1<<29)| GL_TEXTURE_WRAP_S | GL_TEXTURE_WRAP_T,(u8*)email_tex_bin);
	email_pal = gluTexLoadPal((u16*)email_pal_bin,256,GL_RGB256);

	glGenTextures(1,&deco_tex);

	glBindTexture(0,deco_tex);
	glTexImage2D(0,0,GL_RGB256,TEXTURE_SIZE_512,TEXTURE_SIZE_256,0,TEXGEN_TEXCOORD,(u8*)deco_tex_bin);
	deco_pal = gluTexLoadPal((u16*)deco_pal_bin,256,GL_RGB256);

	//No texture
	glGenTextures(1,&notex);
	glBindTexture(0,notex);
}

void subload()
{
	printf("\n Start subload");
	vramSetBankI(VRAM_I_SUB_SPRITE);
	oamEnable(&oamSub);

	//videoSetModeSub(MODE_3_2D);
	
	oamInit(&oamSub, SpriteMapping_1D_128, false);
	gfxSub = oamAllocateGfx(&oamSub, SpriteSize_32x32, SpriteColorFormat_16Color);

	gfxSub = *dotTiles;
	SPRITE_PALETTE_SUB = *dotPal;

/*
	// Sprite initialisation
	dmaCopy(dotPal, SPRITE_PALETTE_SUB, 32);
	dmaCopy(dotTiles, gfxSub, 4*4*32);
*/


	printf("\n Finish subload");
}

void subrun()
{
	int xtemp = 100;
	int ytemp = 100;
	touchRead(&touch);
	if ((keysHeld() & KEY_TOUCH))
	{
		xtemp = touch.px;
		ytemp = touch.py;
	}
	oamSet(&oamSub, 
			0, 
			xtemp, 
			ytemp, 
			0, 
			0,
			SpriteSize_32x32, 
			SpriteColorFormat_16Color, 
			gfxSub, 
			-1, 
			false, 
			false,			
			false, false, 
			false	
			);     
	oamUpdate(&oamSub);
	return;
}

void seedrandom()
{
	int hours, seconds, minutes; 
	time_t unixTime = time(NULL);
	struct tm* timeStruct = gmtime((const time_t *)&unixTime);
		
	hours = timeStruct->tm_hour;
	minutes = timeStruct->tm_min;
	seconds = timeStruct->tm_sec;

	int random_seed = hours+seconds+minutes;
	srand(random_seed);
}

